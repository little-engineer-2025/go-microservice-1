// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9SVQW/bPAyG/4rA7zt6TbrdfMsWoPCt2LJTERSqxSQqbEmT6G5B4P8+UHLbOHaXZuiw",
	"7GRFkSi+D/lKOyht7axBQwHyHYRyg7WMw4WdW/46bx160hhnFYbSa0faGv5JW4eQQyCvzRraDFSDt0oS",
	"8p8r62tJkANPvCNdI2TDHaSpwtFYZJW91aoXqmm0GkZpM/D4rdEeFeQ3Xcisl+zyaZO9u8eS+ACWWBjX",
	"0BvqPEXiaNq/TPRaUrk5mq2NI1lBTr7B7LTsj25+UnNkZTsQwlParOwgZZhdF2JlvailkWtt1oIVC01Y",
	"B8ig0iWaEM80suaIMyfLDcZs5DpAfnMYcGGVFR6DbXzJqrp93FLQLp9ERLJidl1ABg/oQ9p8eTHl0Nah",
	"kU5DDh8uphdTyMBJ2kTgEw4UR2ukxAK95LMLBTlcIc2qahHXcI2DsyakUr2fTvlTWkNo4lbpXKXLuHly",
	"H1IFkw95lBjkO/jf4wpy+G/y7NhJZ9dJ9Oozb+m93CbcB5hFpQMJu9rny8tCU9fSbyGHz0he4wMKWVX9",
	"KnSkE8Nlm4GzYUT7J4+SkLVDam8M9NGq7Umqj4lNrm37DuIubAe4L9/04DGqiw2KMqpWz8QOsCYqQgqD",
	"3/cWDai2Wddbkx1/CtUms1RIOGQ9j/Mdaye9rJHQj/mhmHPVaYPxXEFWPBYa2JOQx97uG6VQcIg320N1",
	"7E5e9kphmqrq91ltH7ps7raimI912Evm+icUn+71322+l5ruCukIYPf4nvQRx2fmnCH/wVslPbGvulqm",
	"Z3G1xISFNAJ/6EC9x3O05M2Ip746Jc/7Ivnr78h5FPtLcxdIU8Nvyesq3rbtzwAAAP//OirDL+YLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
