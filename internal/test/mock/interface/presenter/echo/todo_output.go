// Code generated by mockery v2.38.0. DO NOT EDIT.

package echo

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	model "github.com/avisiedo/go-microservice-1/internal/domain/model"

	public "github.com/avisiedo/go-microservice-1/internal/api/http/public"
)

// TodoOutput is an autogenerated mock type for the TodoOutput type
type TodoOutput struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *TodoOutput) Create(ctx echo.Context, data *model.Todo) (*public.ToDo, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *public.ToDo
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, *model.Todo) (*public.ToDo, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, *model.Todo) *public.ToDo); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*public.ToDo)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, *model.Todo) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, data
func (_m *TodoOutput) Get(ctx echo.Context, data *model.Todo) (*public.ToDo, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *public.ToDo
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, *model.Todo) (*public.ToDo, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, *model.Todo) *public.ToDo); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*public.ToDo)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, *model.Todo) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, data
func (_m *TodoOutput) GetAll(ctx echo.Context, data []model.Todo) ([]public.ToDo, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []public.ToDo
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, []model.Todo) ([]public.ToDo, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, []model.Todo) []public.ToDo); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]public.ToDo)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, []model.Todo) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTodoOutput creates a new instance of TodoOutput. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoOutput(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoOutput {
	mock := &TodoOutput{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
