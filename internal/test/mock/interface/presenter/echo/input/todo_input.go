// Code generated by mockery v2.38.0. DO NOT EDIT.

package input

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"

	model "github.com/avisiedo/go-microservice-1/internal/domain/model"
)

// TodoInput is an autogenerated mock type for the TodoInput type
type TodoInput struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx
func (_m *TodoInput) Create(ctx echo.Context) (*model.Todo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) (*model.Todo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) *model.Todo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *TodoInput) GetAll(ctx echo.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTodoInput creates a new instance of TodoInput. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoInput(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoInput {
	mock := &TodoInput{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
